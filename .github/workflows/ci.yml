name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22, 1.23]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Check test coverage
      run: |
        go tool cover -func=coverage.out
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 80.0" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below 80% threshold"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets 80% threshold"
        fi

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.23'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build application
      run: go build -v -o replicated-mcp-server ./cmd/server

    - name: Test application help
      run: |
        ./replicated-mcp-server --help
        echo "✅ Application help output working"

    - name: Test application version
      run: |
        ./replicated-mcp-server --version
        echo "✅ Application version output working"

    - name: Test configuration validation
      run: |
        # Test missing API token (should fail)
        if ./replicated-mcp-server 2>/dev/null; then
          echo "❌ Expected failure for missing API token"
          exit 1
        else
          echo "✅ Correctly failed for missing API token"
        fi
        
        # Test invalid log level (should fail)
        if REPLICATED_API_TOKEN="test" ./replicated-mcp-server --log-level=invalid 2>/dev/null; then
          echo "❌ Expected failure for invalid log level"
          exit 1
        else
          echo "✅ Correctly failed for invalid log level"
        fi
        
        # Test valid configuration (should succeed)
        if REPLICATED_API_TOKEN="test" ./replicated-mcp-server --log-level=info --timeout=10 2>/dev/null; then
          echo "✅ Application starts successfully with valid config"
        else
          echo "❌ Application failed with valid configuration"
          exit 1
        fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

    - name: Check for vulnerabilities in dependencies
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Check README exists and has content
      run: |
        if [[ ! -f README.md ]]; then
          echo "❌ README.md not found"
          exit 1
        fi
        
        if [[ ! -s README.md ]]; then
          echo "❌ README.md is empty"
          exit 1
        fi
        
        echo "✅ README.md exists and has content"

    - name: Check for required documentation sections
      run: |
        REQUIRED_SECTIONS=("Installation" "Usage" "Configuration")
        
        for section in "${REQUIRED_SECTIONS[@]}"; do
          if ! grep -q "## $section" README.md; then
            echo "❌ README.md missing required section: $section"
            exit 1
          else
            echo "✅ Found required section: $section"
          fi
        done

    - name: Validate go.mod and go.sum
      run: |
        go mod tidy
        if [[ -n $(git status --porcelain go.mod go.sum) ]]; then
          echo "❌ go.mod or go.sum not properly maintained"
          echo "Please run 'go mod tidy' and commit the changes"
          git diff go.mod go.sum
          exit 1
        else
          echo "✅ go.mod and go.sum are properly maintained"
        fi

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, build, lint]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Download dependencies
      run: go mod download

    - name: Build application
      run: go build -v -o replicated-mcp-server ./cmd/server

    - name: Run end-to-end configuration tests
      run: |
        echo "Testing environment variable configuration..."
        REPLICATED_API_TOKEN="env-token" LOG_LEVEL="debug" TIMEOUT="60" \
          ./replicated-mcp-server 2>output.log
        
        # Check that logs contain expected configuration
        if grep -q '"config":"Config{APIToken: (set), LogLevel: debug, Timeout: 1m0s' output.log; then
          echo "✅ Environment variable configuration working"
        else
          echo "❌ Environment variable configuration failed"
          cat output.log
          exit 1
        fi

    - name: Test CLI flag precedence
      run: |
        echo "Testing CLI flag precedence over environment variables..."
        REPLICATED_API_TOKEN="env-token" LOG_LEVEL="error" \
          ./replicated-mcp-server --log-level=info --timeout=120 2>output.log
        
        # Check that CLI flags override environment variables
        if grep -q '"config":"Config{APIToken: (set), LogLevel: info, Timeout: 2m0s' output.log; then
          echo "✅ CLI flag precedence working correctly"
        else
          echo "❌ CLI flag precedence failed"
          cat output.log
          exit 1
        fi

    - name: Test logging levels
      run: |
        echo "Testing different log levels..."
        
        # Test that fatal level only shows fatal/error logs
        REPLICATED_API_TOKEN="test" ./replicated-mcp-server --log-level=fatal 2>fatal.log
        if grep -q '"level":"INFO"' fatal.log; then
          echo "❌ Fatal level should not show INFO logs"
          exit 1
        else
          echo "✅ Fatal level correctly filters logs"
        fi
        
        # Test that info level shows info logs
        REPLICATED_API_TOKEN="test" ./replicated-mcp-server --log-level=info 2>info.log
        if grep -q '"level":"INFO"' info.log; then
          echo "✅ Info level correctly shows INFO logs"
        else
          echo "❌ Info level should show INFO logs"
          exit 1
        fi

    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs
        path: "*.log"